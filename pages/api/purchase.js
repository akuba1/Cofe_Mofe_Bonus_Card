import 'dotenv/config'
import fetch, { Request, Response } from 'node-fetch'
import { createClient } from '@supabase/supabase-js'

// –ü–æ–¥—ä—ë–º fetch –≤ –≥–ª–æ–±–∞–ª—å–Ω—ã–π –∫–æ–Ω—Ç–µ–∫—Å—Ç (–µ—Å–ª–∏ Next.js –Ω–µ –ø—Ä–µ–¥–æ—Å—Ç–∞–≤–ª—è–µ—Ç –µ–≥–æ)
if (!global.fetch) {
  global.fetch   = fetch
  global.Request = Request
  global.Response = Response
}

// –ü—Ä–æ–≤–µ—Ä–∫–∞ env-–ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–¥–∏–Ω —Ä–∞–∑ –ø—Ä–∏ —Å—Ç–∞—Ä—Ç–µ
const {
  SUPABASE_URL,
  SUPABASE_ANON_KEY,
  TELEGRAM_BOT_TOKEN,
  TELEGRAM_CHAT_ID
} = process.env

if (!SUPABASE_URL || !SUPABASE_ANON_KEY) {
  throw new Error('Missing Supabase credentials in environment variables')
}

const supabase = createClient(SUPABASE_URL, SUPABASE_ANON_KEY)

async function sendTelegramMessage(text) {
  if (!TELEGRAM_BOT_TOKEN || !TELEGRAM_CHAT_ID) return
  await fetch(
    `https://api.telegram.org/bot${TELEGRAM_BOT_TOKEN}/sendMessage`,
    {
      method: 'POST',
      headers: { 'Content-Type': 'application/json' },
      body: JSON.stringify({
        chat_id: TELEGRAM_CHAT_ID,
        text,
        parse_mode: 'Markdown'
      })
    }
  )
}

export default async function handler(req, res) {
  // 1) –û—Ç–¥–∞—ë–º 405, –µ—Å–ª–∏ –Ω–µ POST
  if (req.method !== 'POST') {
    return res.status(405).json({ error: 'Method Not Allowed' })
  }

  // 2) –ë–µ—Ä—ë–º —Ç–µ–ª–æ –∑–∞–ø—Ä–æ—Å–∞ –≤–Ω—É—Ç—Ä–∏ try/catch
  let clientId
  try {
    ;({ clientId } = req.body)  // ; –Ω—É–∂–µ–Ω, –µ—Å–ª–∏ –ø—Ä–µ–¥—ã–¥—É—â–∏–π –æ–ø–µ—Ä–∞—Ç–æ—Ä –Ω–µ –∑–∞–≤–µ—Ä—à—ë–Ω
  } catch (err) {
    console.error('‚ùå Invalid JSON in request body:', err)
    return res.status(400).json({ error: 'Invalid JSON' })
  }

  if (!clientId) {
    return res.status(400).json({ error: 'clientId is required' })
  }

  // 3) –†–∞–±–æ—Ç–∞ —Å Supabase –∏ –±–æ–Ω—É—Å–Ω–∞—è –ª–æ–≥–∏–∫–∞
  try {
    // 3.1) –ß–∏—Ç–∞–µ–º —Ç–µ–∫—É—â–∏–µ –ø–æ–∫—É–ø–∫–∏ –∫–ª–∏–µ–Ω—Ç–∞
const { data: existing, error: selectErr } = await supabase
  .from('clients')
  .select('purchases')
  .eq('id', clientId)
  .maybeSingle()

if (selectErr) {
  console.error('DB read error:', selectErr)
  throw selectErr
}

let purchases

if (existing) {
  // 3.2) –û–±–Ω–æ–≤–ª—è–µ–º —Å—á—ë—Ç—á–∏–∫ –Ω–∞ +1
  purchases = existing.purchases + 1
  const { error: updateErr } = await supabase
    .from('clients')
    .update({ purchases })
    .eq('id', clientId)

  if (updateErr) {
    console.error('DB update error:', updateErr)
    throw updateErr
  }

} else {
  // 3.3) –°–æ–∑–¥–∞—ë–º –Ω–æ–≤—É—é –∑–∞–ø–∏—Å—å —Å purchases = 1
  purchases = 1
  const { error: insertErr } = await supabase
    .from('clients')
    .insert({ id: clientId, purchases })

  if (insertErr) {
    console.error('DB insert error:', insertErr)
    throw insertErr
  }
}

// 3.4) –ë–æ–Ω—É—Å–Ω–∞—è –ª–æ–≥–∏–∫–∞
const bonus    = purchases === 7
const remaining = bonus ? 0 : 7 - purchases

if (bonus) {
  await supabase.from('notifications').insert({
    client_id: clientId,
    type: 'bonus_awarded'
  })
  await sendTelegramMessage(
    `üéâ –ö–ª–∏–µ–Ω—Ç *${clientId}* –ø–æ–ª—É—á–∏–ª 7-–π –∫–æ—Ñ–µ!`
  )
}

// 3.5) –í–æ–∑–≤—Ä–∞—â–∞–µ–º –æ—Ç–≤–µ—Ç
return res.status(200).json({ purchases, remaining, bonus })

  } catch (err) {
    console.error('API /purchase error:', err)
    return res.status(500).json({ error: err.message })
  }
}
